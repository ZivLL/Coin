<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cointeam.coin.mapper.CardPartMapper">

    <select id="selectCard" resultType="com.cointeam.coin.pojo.po.CardPo">
        SELECT
            c.id,
            c.title,
            c.content,
            c.time,
            c.type
        FROM
            coin.card c
                LEFT JOIN my_collect_card mc ON mc.card_id = c.id
        where c.type = #{roleParam.type}
        ORDER BY RAND()
        LIMIT 3
</select>
    
    <select id="selectCardContent" resultType="com.cointeam.coin.pojo.po.CardDetailsPo">
        select bac.branch_id, bac.device_id, bac.branch_card_id, bac.branch_content, bac.branch_card_id, bac.branchTime,
               c.title, c.content, bac.branch_content as branchContent, bac.branchTime as branchTime
        from coin.card c
        left join (select b.id as branch_id, b.device_id as device_id, b.card_id as branch_card_id,
                          b.content as branch_content, b.time as branchTime,
                   ab.status
                  from branch b
                  left join audit_branch ab
                  on b.time = ab.time) as bac
        on bac.branch_card_id = c.id
        where c.type = #{roleParam.type}
        and bac.branch_card_id = #{roleParam.cardId}
    </select>

    <insert id="insertAuditBranch" useGeneratedKeys="true" keyColumn="id">
        ALTER TABLE device
        AUTO_INCREMENT = 1;
        insert coin.audit_branch(device_id, card_id, content, type, status, time, submit_times)
        VALUES (#{insertBranchParam.deviceId},#{insertBranchParam.cardId},#{insertBranchParam.branchContent},#{insertBranchParam.type},0,#{insertBranchParam.time},1)
    </insert>

    <select id="selectCardBranches" resultType="com.cointeam.coin.pojo.bo.CardDetailsBo">
        select bac.branch_id, bac.device_id, bac.branch_card_id, bac.branch_content, bac.branch_card_id, bac.branchTime,
               c.title, c.content, bac.branch_content as branchContent, bac.branchTime as branchTime
        from coin.card c
                 left join (select b.id as branch_id, b.device_id as device_id, b.card_id as branch_card_id,
                                   b.content as branch_content, b.time as branchTime,
                                   ab.status
                            from branch b
                                     left join audit_branch ab
                                               on b.time = ab.time) as bac
                           on bac.branch_card_id = c.id
        where bac.branch_card_id = #{cardId,jdbcType=INTEGER}
    </select>

</mapper>